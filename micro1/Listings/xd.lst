


ARM Macro Assembler    Page 1 


    1 00000000 00000032 
                       W_Capacity
                               EQU              0x32        ; W_Capacity 
    2 00000000 00000003 
                       SIZE    EQU              0x03        ; SIZE 
    3 00000000         
    4 00000000                 AREA             knapsackcode, CODE, READONLY 
                                                            ; new code section
    5 00000000                 ALIGN                        ; alignment of __ma
                                                            in
    6 00000000         
    7 00000000         ; Weight ve Profit dizilerini tanimla
    8 00000000 0A 14 1E 
                       weight  DCB              10, 20, 30  ; weight array
    9 00000003 3C 64 78 
                       profit  DCB              60, 100, 120 ; profit array
   10 00000006         
   11 00000006         ; Sonuç için placeholder
   12 00000006                 ENTRY
   13 00000006         __main  FUNCTION                     ; start __main func
                                                            tion
   14 00000006                 EXPORT           __main      ; make __main globa
                                                            l
   15 00000006         
   16 00000006         ; Parametreleri yükle
   17 00000006 2432            MOVS             R4, #W_Capacity ; load W_Capaci
                                                            ty = 50 to R4
   18 00000008 2503            MOVS             R5, #SIZE   ; load SIZE = 50 to
                                                             R5
   19 0000000A 4912            LDR              R1, =profit ; load address of p
                                                            rofit array to R1
   20 0000000C 4A12            LDR              R2, =weight ; load address of w
                                                            eight array to R2
   21 0000000E         
   22 0000000E F000 F801       BL               knapsack    ; call knapsack
   23 00000012 E01E            B                stop        ; call stop
   24 00000014         knapsack
   25 00000014 B5F8            PUSH             {R3-R7 , LR} ; save registers f
                                                            rom R3 to R7 and li
                                                            nk register
   26 00000016         
   27 00000016 2C00            CMP              R4, #0      ; compare capacity 
                                                            is zero
   28 00000018 D019            BEQ              return_0    ; if capacity is ze
                                                            ro call return_0
   29 0000001A         
   30 0000001A 2D00            CMP              R5, #0      ; compare size is z
                                                            ero
   31 0000001C D017            BEQ              return_0    ; if size is zero c
                                                            all return_0
   32 0000001E         
   33 0000001E         
   34 0000001E 1E6E            SUBS             R6, R5, #1  ; n = n-1 "n = SIZE
                                                            " and load n to R6
   35 00000020 5D93            LDRB             R3, [R2, R6] ; load weight[n-1]
                                                             to R3
   36 00000022         
   37 00000022 42A3            CMP              R3, R4      ; compare weight[n-
                                                            1] > w   "w = W_Cap



ARM Macro Assembler    Page 2 


                                                            acity"
   38 00000024 DC0F            BGT              skip        ; if weight[n-1] is
                                                             greater than w the
                                                            n call skip 
   39 00000026         
   40 00000026         
   41 00000026 B430            PUSH             {R4, R5}    ; save w and n
   42 00000028 1E6D            SUBS             R5, R5, #1  ; n = n-1 and load 
                                                            n-1 to R5
   43 0000002A F7FF FFF3       BL               knapsack    ; call knapsack to 
                                                             "return knapsack(w
                                                             , n-1)"
   44 0000002E 0007            MOVS             R7, R0      ; R0 is the result 
                                                            of "knapsack(w , n-
                                                            1)" and save onto R
                                                            7 temporarily
   45 00000030 1AE4            SUBS             R4, R4, R3  ; load w - weight[n
                                                            -1] and load to R4
   46 00000032 F7FF FFEF       BL               knapsack    ; call knapsack to 
                                                            "(W-weight[n-1], n-
                                                            1)"
   47 00000036 5D4E            LDRB             R6, [R1, R5] ; load profit[n-1]
                                                             to R6
   48 00000038 1980            ADDS             R0, R0, R6  ; R0 holds the resu
                                                            lt of knapsack (W-w
                                                            eight[n-1], n-1) an
                                                            d do profit[n-1] + 
                                                            (W-weight[n-1], n-1
                                                            ), load the result 
                                                            to R0
   49 0000003A 42B8            CMP              R0,R7       ; R0 holds profit[n
                                                            -1] + (W-weight[n-1
                                                            ], n-1), R7 holds k
                                                            napsack(w , n-1), a
                                                            nd compare them
   50 0000003C DC01            BGT              continue    ; if R0 is greater 
                                                            than R7 then call c
                                                            ontinue
   51 0000003E 0038            MOVS             R0, R7      ; load R7 to R0 if 
                                                            R7 is greater than 
                                                            R0
   52 00000040 E7FF            B                continue    ; call continue
   53 00000042         continue
   54 00000042 BC30            POP              {R4, R5}    ; reset w and n
   55 00000044 BDF8            POP              {R3-R7, PC} ; reset registers f
                                                            rom R3 to R7 and re
                                                            set Program Counter
                                                            
   56 00000046         
   57 00000046         skip
   58 00000046 1E6D            SUBS             R5, R5, #1  ; n = n-1 and load 
                                                            n-1 to R5
   59 00000048 F7FF FFE4       BL               knapsack    ; call knapsack
   60 0000004C BDF8            POP              {R3-R7, PC} ; reset registers f
                                                            rom R3 to R7 and re
                                                            set Program Counter
                                                            
   61 0000004E         
   62 0000004E         return_0



ARM Macro Assembler    Page 3 


   63 0000004E 2000            MOVS             R0, #0      ; load 0 to R0 for 
                                                            base case "return 0
                                                            "
   64 00000050 BDF8            POP              {R3-R7, PC} ; reset registers f
                                                            rom R3 to R7 and re
                                                            set Program Counter
                                                            
   65 00000052         
   66 00000052 E7FE    stop    B                stop        ; loop for stoping 
                                                            
   67 00000054         
   68 00000054                 ALIGN
   69 00000054                 ENDFUNC                      ; end of function _
                                                            _main
   70 00000054         
   71 00000054                 END                          ; end of file
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M0+ --dep
end=.\objects\xd.d -o.\objects\xd.o -I.\RTE\_Target_1 -IC:\Users\msi\AppData\Lo
cal\Arm\Packs\ARM\CMSIS\6.1.0\CMSIS\Core\Include -IC:\Users\msi\AppData\Local\A
rm\Packs\ARM\Cortex_DFP\1.1.0\Device\ARMCM0plus\Include --predefine="__EVAL SET
A 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 541" -
-predefine="ARMCM0P SETA 1" --predefine="_RTE_ SETA 1" --list=.\listings\xd.lst
 xd.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

__main 00000006

Symbol: __main
   Definitions
      At line 13 in file xd.s
   Uses
      At line 14 in file xd.s
Comment: __main used once
continue 00000042

Symbol: continue
   Definitions
      At line 53 in file xd.s
   Uses
      At line 50 in file xd.s
      At line 52 in file xd.s

knapsack 00000014

Symbol: knapsack
   Definitions
      At line 24 in file xd.s
   Uses
      At line 22 in file xd.s
      At line 43 in file xd.s
      At line 46 in file xd.s
      At line 59 in file xd.s

knapsackcode 00000000

Symbol: knapsackcode
   Definitions
      At line 4 in file xd.s
   Uses
      None
Comment: knapsackcode unused
profit 00000003

Symbol: profit
   Definitions
      At line 9 in file xd.s
   Uses
      At line 19 in file xd.s
Comment: profit used once
return_0 0000004E

Symbol: return_0
   Definitions
      At line 62 in file xd.s
   Uses
      At line 28 in file xd.s
      At line 31 in file xd.s

skip 00000046

Symbol: skip
   Definitions
      At line 57 in file xd.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 38 in file xd.s
Comment: skip used once
stop 00000052

Symbol: stop
   Definitions
      At line 66 in file xd.s
   Uses
      At line 23 in file xd.s
      At line 66 in file xd.s

weight 00000000

Symbol: weight
   Definitions
      At line 8 in file xd.s
   Uses
      At line 20 in file xd.s
Comment: weight used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

SIZE 00000003

Symbol: SIZE
   Definitions
      At line 2 in file xd.s
   Uses
      At line 18 in file xd.s
Comment: SIZE used once
W_Capacity 00000032

Symbol: W_Capacity
   Definitions
      At line 1 in file xd.s
   Uses
      At line 17 in file xd.s
Comment: W_Capacity used once
2 symbols
348 symbols in table
